// Function to validate that the message returned from SonarQube is ok
def qualityGateValidation(qg) {
  if (qg.status != 'OK') {
    // emailext body: "WARNING SANTI: Code coverage is lower than 80% in Pipeline ${BUILD_NUMBER}", subject: 'Error Sonar Scan,   Quality Gate', to: "${EMAIL_ADDRESS}"
    return true
  }
  // emailext body: "CONGRATS SANTI: Code coverage is higher than 80%  in Pipeline ${BUILD_NUMBER} - SUCCESS", subject: 'Info - Correct Pipeline', to: "${EMAIL_ADDRESS}"
  return false
}
pipeline {
  agent any //Usa cualquier agente en el pipeline 

  tools { // para todo el proceso se usa la herramienta de nodeJS, forma de usar el plugin de nodeJs (de jenkins), en jenkinsfile
      nodejs 'nodejs'
  }

 parameters {
    string(name: 'container_name', defaultValue: 'pagina_web', description: 'Nombre del contenedor de docker.')
    string(name: 'image_name', defaultValue: 'pagina_img', description: 'Nombre de la imagene docker.')
    string(name: 'tag_image', defaultValue: 'lts', description: 'Tag de la imagen de la página.')
    string(name: 'container_port', defaultValue: '80', description: 'Puerto que usa el contenedor')
  }


  environment {//
      // General Variables for Pipeline
      PROJECT_ROOT = 'express-mysql/app'// hace referencia a donde se encuentra el root del proyecto, es donde esta la aplicacion
      EMAIL_ADDRESS = 'san99tiagodevsecops@gmail.com'
      //REGISTRY = 'san99tiago/docker-pirate-express'// es como la convención para el nombre de la imagen
      ////usuario docker/nombre de nuestra imagen
      REGISTRY = 'cesarbv/docker-pirate-express'
      /*
      ESTRUCTURA DE LAS IMAGENES EN SU NOMBRE 
        RegistryName/folderName/NFolderName/imageName:tag
      */
  }

  stages {
      stage('Hello') { //Imprime mensajes para ver si jenkins file funca
        steps {
          // First stage is a sample hello-world step to verify correct Jenkins Pipeline
          echo 'Hello World, I am Happy'
          echo 'This is my amazing Pipeline'
        }
      }
      stage('Checkout') {
        steps {
        // Get Github repo using Github credentials (previously added to Jenkins credentials)
        //checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/san99tiago/docker-pirate']]])        }
        checkout([$class: 'GitSCM', branches: [[name: '*/main']], extensions: [], userRemoteConfigs: [[url: 'https://github.com/cesarbv22/docker-pirate']]])
               }
      }
      stage('Install dependencies') {//acá se configuran las dependencias de nodeJs
        steps {
          sh 'npm --version'
          sh "cd ${PROJECT_ROOT}; npm install" //nos dirigimos a la ruta del proyecto y ahi se corre el npm install
        }
      }
      stage('Unit tests') {// dos dirigimos a la ruta del proyecto y ahi ejecutamos las pruebas unitarias 
        steps {
          // Run unit tests
          sh "cd ${PROJECT_ROOT}; npm run test"
        }
      }
      stage('Generate coverage report') {
        steps {
          // Run code-coverage reports
          sh "cd ${PROJECT_ROOT}; npm run coverage"
        }
      }
      stage('scan') {
          environment {//variable de entorno
            // Previously defined in the Jenkins "Global Tool Configuration"
            scannerHome = tool 'sonar-scanner' //sonar-scanner es el nombre que se puso cuando se configuró el plugin en jenkins
          }
          steps {
            // "sonarqube" is the server configured in "Configure System"
            withSonarQubeEnv('sonarqube') {// sonarqube, es el nombre del sonarqube server que se configuró
              // Execute the SonarQube scanner with desired flags
              sh "${scannerHome}/bin/sonar-scanner \
                          -Dsonar.projectKey=SimpleExpressExample:Test \
                          -Dsonar.projectName=SimpleExpressExample \
                          -Dsonar.projectVersion=0.0.${BUILD_NUMBER} \
                          -Dsonar.host.url=http://mysonarqube:9000 \
                          -Dsonar.sources=./${PROJECT_ROOT}/app.js,./${PROJECT_ROOT}/config/db.config.js,./${PROJECT_ROOT}/routes/developers.js \
                          -Dsonar.login=admin \
                          -Dsonar.password=admin \
                          -Dsonar.tests=./${PROJECT_ROOT}/test \
                          -Dsonar.javascript.lcov.reportPaths=./${PROJECT_ROOT}/coverage/lcov.info"
            }
            timeout(time: 3, unit: 'MINUTES') {
              // In case of SonarQube failure or direct timeout exceed, stop Pipeline
              waitForQualityGate abortPipeline: qualityGateValidation(waitForQualityGate())
            }
          }
      }
      stage('Build docker-image') { //empaquetar la aplicacion en el path especifico
        steps {
           //sh "cd ./${PROJECT_ROOT};docker build -t ${REGISTRY}:${BUILD_NUMBER} . "
          echo 'construir imagen con docker'
        }
      }
      stage('Deploy docker-image') {
        steps {
          // // If the Dockerhub authentication stopped, do it again
          //  sh 'docker login'
          //  sh "docker push ${REGISTRY}:${BUILD_NUMBER}"
         echo 'despliegue'
        }
      }
  }
}
