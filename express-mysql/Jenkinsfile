@Library("shared-library") _ //Importanción de la librería compartida, definida en las configuraciones de Jenkins
def qualityGateValidation(qg) {
  if (qg.status != 'OK') {
    // emailext body: "WARNING SANTI: Code coverage is lower than 80% in Pipeline ${BUILD_NUMBER}", subject: 'Error Sonar Scan,   Quality Gate', to: "${EMAIL_ADDRESS}"
    return true
  }
  // emailext body: "CONGRATS SANTI: Code coverage is higher than 80%  in Pipeline ${BUILD_NUMBER} - SUCCESS", subject: 'Info - Correct Pipeline', to: "${EMAIL_ADDRESS}"
  return false
}
pipeline{
    agent any

    tools{
        nodejs 'nodejs'
    }//forma de utilizar el plugin de nodeJs en el pipeline. Este nombre 'nodejs' es el configurado en jenkins

    environment {// variables de entorno que se necesitan para los steps 
      PROJECT_ROOT = 'express-mysql/app' //root donde esta mi aplicacion
      REGISTRY = 'cesarbv/docker-pirate-express' // usuarioDocker/nombreImagen
      DOCKERHUB_CREDENTIALS = credentials('cesarbv-dockerhub')// en teoria acá va el id de las credenciales creadas en jenkins, basado en dockerhub
    }
    /*   ESTRUCTURA DE LAS IMAGENES EN SU NOMBRE 
      RegistryName/folderName/NFolderName/imageName:tag
    */ 

    stages{ // stage 1 de ejemplo
        stage('Test :D'){
            steps {
              helloworld(day:"lunes",name:"Marshall")
            }
        }

         stage('Connection Test Hello Def'){
            steps {
              hello()
            }
        }

        stage('Checkout'){
            steps{
              checkProject()
            }
        }

        stage('Install Dependencies'){
            steps{
              echo "${PROJECT_ROOT} Instalar dependencias"
              installDependencies(project_root: PROJECT_ROOT)
            }
        }

         stage('Unit test'){
            steps{
                unitTest(project_root: PROJECT_ROOT)
                echo "${PROJECT_ROOT} Pruebas unitarias"
            }
        }

         stage('Generate coverage report'){
            steps{
                coverageProject(project_root: PROJECT_ROOT)
                echo "${PROJECT_ROOT} Run coverage"
            }
        }

         stage('Scan'){
             environment {//variable de entorno
                scannerHome = tool 'sonar-scanner' //sonar-scanner es el nombre que se puso cuando se configuró el plugin en jenkins
            }
            steps{
                withSonarQubeEnv('sonarqube') {
                    echo "Paso del scan"
                    escaneo(homeScanner:"${scannerHome}",buildNumber:"${BUILD_NUMBER}",project_root: "${PROJECT_ROOT}" )
                }
                timeout(time: 3, unit: 'MINUTES') {
                    waitForQualityGate abortPipeline: qualityGateValidation(waitForQualityGate())
                }
                
            }
        }

        stage('Build Docker-image'){
            steps{// ya se usa el access token generado con docker-hub y administrado ahora en jenkins
                proyectBuild(project_root:"${PROJECT_ROOT}",registry:"${REGISTRY}",buildNumber:"${BUILD_NUMBER}")
                echo "${PROJECT_ROOT}-- ${REGISTRY}-- ${BUILD_NUMBER} Paso de construir la imagen"
            }
        }
        stage('Deploy Docker-image'){
            steps{
                deployProject(registry:"${REGISTRY}",build_number:"${BUILD_NUMBER}")
                echo "${PROJECT_ROOT}-- ${REGISTRY}-- ${BUILD_NUMBER} Paso de hacer el pull a la imagen"
            }
        }        
    }
}


